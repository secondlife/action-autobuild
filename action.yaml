name: Autobuild
description: Build and package an autobuild project

inputs:
  archive-format:
    type: string
    description: Autobuild package compression format (tbz2, tzst, etc.)
    default: tzst
  checkout:
    type: boolean
    description: Perform git checkout
    default: true
  checkout-build-variables:
    type: boolean
    description: Perform git checkout of build-variables
    default: true
  setup-python:
    type: boolean
    description: Install python using actions/python
    default: true
  setup-autobuild:
    type: boolean
    description: Install autobuild using secondlife/setup-autobuild
    default: true
  configure-args:
    type: string
    description: Additional arguments passed to autobuild configure
  build-args:
    type: string
    description: Additional arguments passed to autobuild build
  addrsize:
    type: string
    description: AUTOBUILD_ADDRSIZE
    default: "64"
  token:
    type: string
    description: AUTOBUILD_GITHUB_TOKEN
  build-variables-ref:
    type: string
    description: build-variables repository ref
    default: viewer
  build-id:
    type: string
    description: "Built id (default: commit sha)"
    default: SHA
  file:
    type: string
    description: "Target autobuild.xml file"
    default: autobuild.xml
  autobuild-version:
    type: string
    description: Version of autobuild to install
    default: 3.*
  cygwin-packages:
    type: string
    description: Additional cygwin packages to install
  platform:
    type: string
    description: Autobuild platform
  configuration:
    type: string
    description: Autobuild configuration
  artifact-name:
    type: string
    description: Name of artifact to upload, defaults to the autobuild package name

outputs:
  package-name:
    value: ${{ steps.autobuild.outputs.package_name }}
  package-filename:
    value: ${{ steps.autobuild.outputs.package_filename }}
  package-basename:
    value: ${{ steps.autobuild.outputs.package_basename }}
  package-platform:
    value: ${{ steps.autobuild.outputs.package_platform }}
  package-md5:
    value: ${{ steps.autobuild.outputs.package_md5 }}
  package-blake2b:
    value: ${{ steps.autobuild.outputs.package_blake2b }}
  package-sha1:
    value: ${{ steps.autobuild.outputs.package_sha1 }}
  package-sha256:
    value: ${{ steps.autobuild.outputs.package_sha256 }}

runs:
  using: composite
  steps:
    - name: Disable autocrlf
      shell: bash
      env:
        WINDOWS: ${{ runner.os == 'Windows' }}
      run: |
        if [[ $WINDOWS == 'true' ]]; then
          git config --global core.autocrlf input
        fi

    - name: Checkout
      uses: actions/checkout@v4
      if: inputs.checkout
      with:
        # Work around the fact that in the context of a pull request github.sha
        # references a dynamic merge commit rather than the branch head
        # https://frontside.com/blog/2020-05-26-github-actions-pull_request/#how-does-pull_request-affect-actionscheckout
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        fetch-depth: 0 # Fetch all history for SCM version
        submodules: recursive

    - name: Create short SHA
      id: sha
      shell: bash
      env:
        SHA: ${{ github.event.pull_request.head.sha || github.sha }}
      run: |
        echo "long=$SHA" >> $GITHUB_OUTPUT
        echo "short=${SHA:0:7}" >> $GITHUB_OUTPUT

    - name: Checkout build variables
      uses: actions/checkout@v4
      if: ${{ fromJSON(inputs.checkout-build-variables) }}
      with:
        repository: secondlife/build-variables
        ref: ${{ inputs.build-variables-ref }}
        path: .build-variables

    - name: Setup python
      uses: actions/setup-python@v5
      if: ${{ fromJSON(inputs.setup-python) }}
      with:
        python-version: 3.x

    - name: Setup autobuild
      shell: bash
      env:
        VERSION: ${{ inputs.autobuild-version }}
      if: ${{ fromJSON(inputs.setup-autobuild) }}
      run: |
        if [[ $VERSION =~ ^[0-9] ]]; then
          pip install "autobuild==$VERSION"
        else
          pip install "autobuild @ git+https://github.com/secondlife/autobuild@$VERSION" 
        fi

    - name: Setup cygwin
      if: ${{ runner.os == 'Windows' }}
      uses: secondlife/setup-cygwin@v3
      with:
        packages: ${{ inputs.cygwin-packages }}

    - name: Determine shell
      id: shell
      shell: bash
      env:
        WINDOWS: ${{ runner.os == 'Windows' }}
      run: |
        if [[ $WINDOWS == 'true' ]]; then
          echo "shell=C:\cygwin64\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'" >> $GITHUB_OUTPUT
        else
          echo "shell=bash" >> $GITHUB_OUTPUT
        fi

    - name: Cache installables
      uses: actions/cache@v4
      id: cache-installables
      with:
        path: ${{ github.workspace }}/.autobuild-installables
        key: ${{ runner.os }}-${{ runner.arch }}-${{ inputs.configuration }}-${{ hashFiles('autobuild.xml') }}

    - name: Determine branch
      id: which-branch
      shell: bash
      run: |
        # in real use, 'git branch -r --contains' should produce a single line,
        # but our self-tests can emit more than one
        branch="$(git branch -r --contains ${{ steps.sha.outputs.long }} | head -n 1)"
        echo "branch=${branch#*/}" >> $GITHUB_OUTPUT

    - name: Run autobuild
      shell: ${{ steps.shell.outputs.shell }}
      id: autobuild
      env:
        AUTOBUILD: autobuild # Expected by some 3p build scripts
        AUTOBUILD_ADDRSIZE: ${{ inputs.addrsize }}
        AUTOBUILD_BUILD_ID: ${{ github.run_id }}
        AUTOBUILD_CONFIG_FILE: ${{ inputs.file }}
        AUTOBUILD_GITHUB_TOKEN: ${{ inputs.token }}
        AUTOBUILD_INSTALLABLE_CACHE: ${{ github.workspace }}/.autobuild-installables
        AUTOBUILD_VARIABLES_FILE: ${{ github.workspace }}/.build-variables/variables
        AUTOBUILD_VCS_BRANCH: ${{ steps.which-branch.outputs.branch || github.ref_name }}
        AUTOBUILD_VCS_INFO: "true"
        BUILD_ID: ${{ inputs.build-id }}
        CONFIGURATION: ${{ inputs.configuration }}
        PLATFORM: ${{ inputs.platform }}
        SHORT_SHA: ${{ steps.sha.outputs.short }}
        WINDOWS: ${{ runner.os == 'Windows' }}
        WORKSPACE: ${{ github.workspace }}
      run: |
        # Change into github.workspace, as cygwin shell places us in $HOME
        cd "$WORKSPACE"

        use_scm_version="$(autobuild print --json | jq -j .package_description.use_scm_version)"
        use_scm_version="$(echo $use_scm_version | tr '[:upper:]' '[:lower:]')"

        if [[ ! -z "$CONFIGURATION" ]]; then
          export AUTOBUILD_CONFIGURATION="$CONFIGURATION"
        fi

        if [[ ! -z "$PLATFORM" ]]; then
          export AUTOBUILD_PLATFORM="$PLATFORM"
        fi

        autobuild install
        autobuild configure ${{ inputs.configure-args }}
        autobuild build --no-configure ${{ inputs.build-args }}
        autobuild package --results-file autobuild-results.json --archive-format ${{ inputs.archive-format }}
        autobuild graph --type mermaid > autobuild-graph.mermaid

    - name: Read results
      id: results
      shell: bash
      run: |
        package_filename="$(cat autobuild-results.json | jq -j .autobuild_package_filename)"
        package_md5="$(cat autobuild-results.json | jq -j .autobuild_package_md5)"
        package_sha1="$(cat autobuild-results.json | jq -j .autobuild_package_sha1)"
        package_sha256="$(cat autobuild-results.json | jq -j .autobuild_package_sha256)"
        package_blake2b="$(cat autobuild-results.json | jq -j .autobuild_package_blake2b)"
        package_platform="$(cat autobuild-results.json | jq -j .autobuild_package_platform)"
        package_name="$(cat autobuild-results.json | jq -j .autobuild_package_name)"

        # Get basename of package (needs to work for windows and *nix)
        package_basename="${package_filename##*/}"
        package_basename="${package_basename##*\\}"
        package_basename_no_ext="$(basename $package_basename .tar.zst)"

        echo "package_basename=$package_basename" >> $GITHUB_OUTPUT
        echo "package_basename_no_ext=$package_basename_no_ext" >> $GITHUB_OUTPUT
        echo "package_filename=$package_filename" >> $GITHUB_OUTPUT
        echo "package_md5=$package_md5" >> $GITHUB_OUTPUT
        echo "package_sha1=$package_sha1" >> $GITHUB_OUTPUT
        echo "package_sha256=$package_sha256" >> $GITHUB_OUTPUT
        echo "package_blake2b=$package_blake2b" >> $GITHUB_OUTPUT
        echo "package_name=$package_name" >> $GITHUB_OUTPUT
        echo "package_platform=$package_platform" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name || steps.results.outputs.package_basename_no_ext }}
        path: |
          ${{ steps.results.outputs.package_filename }}
          autobuild-results.json
          autobuild-graph.mermaid
