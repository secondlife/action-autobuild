name: Autobuild
description: Build and package an autobuild project

inputs:
  checkout:
    type: boolean
    description: Perform git checkout
    default: true
  checkout-build-variables:
    type: boolean
    description: Perform git checkout of build-variables
    default: true
  setup-python:
    type: boolean
    description: Install python using actions/python
    default: true
  setup-autobuild:
    type: boolean
    description: Install autobuild using secondlife/setup-autobuild
    default: true
  configure-args:
    type: string
    description: Additional arguments passed to autobuild configure
  build-args:
    type: string
    description: Additional arguments passed to autobuild build
  addrsize:
    type: string
    description: AUTOBUILD_ADDRSIZE
    default: "64"
  build-variables-ref:
    type: string
    description: build-variables repository ref
    default: master
  build-id:
    type: string
    description: "Built id (default: commit sha)"
    default: SHA
  file:
    type: string
    description: "Target autobuild.xml file"
    default: autobuild.xml
  autobuild-version:
    type: string
    description: Version of autobuild to install
    default: v3.6.0

outputs:
  package-name:
    value: ${{ steps.autobuild.outputs.package_name }}
  package-filename:
    value: ${{ steps.autobuild.outputs.package_filename }}
  package-basename:
    value: ${{ steps.autobuild.outputs.package_basename }}
  package-platform:
    value: ${{ steps.autobuild.outputs.package_platform }}
  package-md5:
    value: ${{ steps.autobuild.outputs.package_md5 }}
  package-blake2b:
    value: ${{ steps.autobuild.outputs.package_blake2b }}
  package-sha1:
    value: ${{ steps.autobuild.outputs.package_sha1 }}
  package-sha256:
    value: ${{ steps.autobuild.outputs.package_sha256 }}

runs:
  using: composite
  steps:
    - name: Disable autocrlf
      shell: bash
      env:
        WINDOWS: ${{ runner.os == 'Windows' }}
      run: |
        if [[ $WINDOWS == 'true' ]]; then
          git config --global core.autocrlf input
        fi

    - name: Checkout
      uses: actions/checkout@v3
      if: inputs.checkout
      with:
        # Work around the fact that in the context of a pull request github.sha
        # references a dynamic merge commit rather than the branch head
        # https://frontside.com/blog/2020-05-26-github-actions-pull_request/#how-does-pull_request-affect-actionscheckout
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        fetch-depth: 0 # Fetch all history for SCM version
        submodules: recursive

    - name: Create short SHA
      id: sha
      shell: bash
      env:
        SHA: ${{ github.event.pull_request.head.sha || github.sha }}
      run: |
        echo "::set-output name=long::$SHA"
        echo "::set-output name=short::${SHA:0:7}"

    - name: Checkout build variables
      uses: actions/checkout@v3
      if: inputs.checkout-build-variables
      with:
        repository: secondlife/build-variables
        ref: ${{ inputs.build-variables-ref }}
        path: .build-variables

    - name: Setup python
      uses: actions/setup-python@v4
      if: inputs.setup-python
      with:
        python-version: 3.x

    - name: Setup autobuild
      shell: bash
      env:
        VERSION: ${{ inputs.autobuild-version }}
      if: inputs.setup-autobuild
      run: pip install autobuild==$VERSION

    - name: Setup cygwin
      if: ${{ runner.os == 'Windows' }}
      uses: secondlife/setup-cygwin@v1

    - name: Determine shell
      id: shell
      shell: bash
      env:
        WINDOWS: ${{ runner.os == 'Windows' }}
      run: |
        if [[ $WINDOWS == 'true' ]]; then
          echo "::set-output name=shell::C:\cygwin64\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'"
        else
          echo '::set-output name=shell::bash'
        fi

    - name: Cache installables
      uses: actions/cache@v3
      id: cache-installables
      with:
        path: ${{ github.workspace }}/.autobuild-installables
        key: ${{ runner.os }}-${{ runner.arch }}-${{ inputs.configuration }}-${{ hashFiles('autobuild.xml') }}

    - name: Run autobuild
      shell: ${{ steps.shell.outputs.shell }}
      id: autobuild
      env:
        AUTOBUILD_VCS_INFO: "true"
        AUTOBUILD_CONFIG_FILE: ${{ inputs.file }}
        AUTOBUILD: autobuild # Expected by some 3p build scripts
        AUTOBUILD_ADDRSIZE: ${{ inputs.addrsize }}
        AUTOBUILD_INSTALLABLE_CACHE: ${{ github.workspace }}/.autobuild-installables
        AUTOBUILD_VARIABLES_FILE: ${{ github.workspace }}/.build-variables/variables
        BUILD_ID: ${{ inputs.build-id }}
        CONFIGURATION: ${{ inputs.configuration }}
        SHORT_SHA: ${{ steps.sha.outputs.short }}
        WORKSPACE: ${{ github.workspace }}
        WINDOWS: ${{ runner.os == 'Windows' }}
      run: |
        if [[ $WINDOWS == 'true' ]]; then
          # Ensure GITHUB_PATH is added to cygwin path
          export PATH="$PATH:$GITHUB_PATH"
          # Change into github.workspace, as cygwin shell places us in $HOME
          cd "$WORKSPACE"
        fi

        use_scm_version="$(autobuild print --json | jq -j .package_description.use_scm_version)"
        use_scm_version="$(echo $use_scm_version | tr '[:upper:]' '[:lower:]')"

        # Set AUTOBUILD_BUILD_ID
        if [[ "$BUILD_ID" == "SHA" ]]; then
          # Only default build ID to SHA if SCM version is disabled
          if [[ "$use_scm_version" != "true" ]]; then
            export AUTOBUILD_BUILD_ID="$SHORT_SHA"
          fi
        elif [[ ! -z "$BUILD_ID" ]]; then
          # Allow an explicitly set build ID to be used
          export AUTOBUILD_BUILD_ID="$BUILD_ID"
        fi

        if [[ ! -z "$CONFIGURATION" ]]; then
          export AUTOBUILD_CONFIGURATION="$CONFIGURATION"
        fi

        autobuild install
        autobuild configure ${{ inputs.configure-args }}
        autobuild build --no-configure ${{ inputs.build-args }}
        autobuild package --results-file autobuild-results.json --archive-format tzst
        autobuild graph --type mermaid > autobuild-graph.mermaid

    - name: Read results
      id: results
      shell: bash
      run: |
        package_filename="$(cat autobuild-results.json | jq -j .autobuild_package_filename)"
        package_md5="$(cat autobuild-results.json | jq -j .autobuild_package_md5)"
        package_sha1="$(cat autobuild-results.json | jq -j .autobuild_package_sha1)"
        package_sha256="$(cat autobuild-results.json | jq -j .autobuild_package_sha256)"
        package_blake2b="$(cat autobuild-results.json | jq -j .autobuild_package_blake2b)"
        package_platform="$(cat autobuild-results.json | jq -j .autobuild_package_platform)"
        package_name="$(cat autobuild-results.json | jq -j .autobuild_package_name)"

        # Get basename of package (needs to work for windows and *nix)
        package_basename="${package_filename##*/}"
        package_basename="${package_basename##*\\}"
        package_basename_no_ext="$(basename $package_basename .tar.zst)"

        echo "::set-output name=package_basename::$package_basename"
        echo "::set-output name=package_basename_no_ext::$package_basename_no_ext"
        echo "::set-output name=package_filename::$package_filename"
        echo "::set-output name=package_md5::$package_md5"
        echo "::set-output name=package_sha1::$package_sha1"
        echo "::set-output name=package_sha256::$package_sha256"
        echo "::set-output name=package_blake2b::$package_blake2b"
        echo "::set-output name=package_name::$package_name"
        echo "::set-output name=package_platform=$package_platform"

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.results.outputs.package_basename_no_ext }}
        path: |
          ${{ steps.results.outputs.package_filename }}
          autobuild-results.json
          autobuild-graph.mermaid
